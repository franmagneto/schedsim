/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package schedsim.gui;

import java.util.List;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import schedsim.Scheduler;

/**
 *
 * @author francisco
 */
public class FScheduler extends javax.swing.JFrame {

	private DefaultTableModel tModel = null;
	private Scheduler scheduler = null;
	schedsim.Process executing = null;
	private int pid = 0;
	private int lastTime = 0;
	private final int processLimit = 14;

	/**
	 * Creates new form FScheduler
	 */
	public FScheduler(List<schedsim.Process> readyQueue, Scheduler.Algorithm algorithm) {
		initComponents();
		if (readyQueue != null) {
			this.scheduler = new Scheduler(readyQueue, algorithm);
		}
		tModel = (DefaultTableModel) tProcesses.getModel();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pReady = new javax.swing.JPanel();
        pCPU = new javax.swing.JPanel();
        spTable = new javax.swing.JScrollPane();
        tProcesses = new javax.swing.JTable();
        pExecute = new javax.swing.JPanel();
        bOneStep = new javax.swing.JButton();
        spStats = new javax.swing.JScrollPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        pReady.setBorder(javax.swing.BorderFactory.createTitledBorder("Processos em espera"));

        javax.swing.GroupLayout pReadyLayout = new javax.swing.GroupLayout(pReady);
        pReady.setLayout(pReadyLayout);
        pReadyLayout.setHorizontalGroup(
            pReadyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 405, Short.MAX_VALUE)
        );
        pReadyLayout.setVerticalGroup(
            pReadyLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 47, Short.MAX_VALUE)
        );

        pCPU.setBorder(javax.swing.BorderFactory.createTitledBorder("CPU"));

        javax.swing.GroupLayout pCPULayout = new javax.swing.GroupLayout(pCPU);
        pCPU.setLayout(pCPULayout);
        pCPULayout.setHorizontalGroup(
            pCPULayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 50, Short.MAX_VALUE)
        );
        pCPULayout.setVerticalGroup(
            pCPULayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 48, Short.MAX_VALUE)
        );

        spTable.setBorder(javax.swing.BorderFactory.createTitledBorder("Processos"));

        tProcesses.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Tempo de Chegada", "Burst"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tProcesses.setEnabled(false);
        tProcesses.setFocusable(false);
        tProcesses.getTableHeader().setReorderingAllowed(false);
        spTable.setViewportView(tProcesses);

        pExecute.setBorder(javax.swing.BorderFactory.createTitledBorder("Executar"));

        bOneStep.setText("Próximo");
        bOneStep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bOneStepActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pExecuteLayout = new javax.swing.GroupLayout(pExecute);
        pExecute.setLayout(pExecuteLayout);
        pExecuteLayout.setHorizontalGroup(
            pExecuteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pExecuteLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bOneStep)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pExecuteLayout.setVerticalGroup(
            pExecuteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pExecuteLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bOneStep)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        spStats.setBorder(javax.swing.BorderFactory.createTitledBorder("Estatísticas"));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pCPU, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pReady, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pExecute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(spTable, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(spStats)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pCPU, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pReady, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pExecute, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(spTable, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
                    .addComponent(spStats))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bOneStepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bOneStepActionPerformed
		//		executing = scheduler.nextProcess(Algorithm);
		//		drawProcesses(scheduler.getReadyQueue());
    }//GEN-LAST:event_bOneStepActionPerformed

	private void drawProcesses(List<schedsim.Process> readyQueue) {
		pReady.removeAll();
		pReady.repaint();
		pCPU.removeAll();
		pCPU.repaint();

		for (schedsim.Process p : readyQueue) {
			JTextField processBlock = new JTextField("P" + (p.getId() + 1));
			processBlock.setEditable(false);
			processBlock.setHorizontalAlignment(javax.swing.JTextField.CENTER);
			processBlock.setBackground(new java.awt.Color(255, 255, 0));
			processBlock.setForeground(new java.awt.Color(0, 0, 0));
			pReady.add(processBlock);

			int i = readyQueue.indexOf(p);
			processBlock.setBounds(15 + (i * 35), 25, 30, 30);
		}
		if (executing != null) {
			JTextField processBlock = new JTextField("P" + (executing.getId() + 1));
			processBlock.setEditable(false);
			processBlock.setHorizontalAlignment(javax.swing.JTextField.CENTER);
			processBlock.setBackground(new java.awt.Color(0, 255, 0));
			processBlock.setForeground(new java.awt.Color(0, 0, 0));
			pCPU.add(processBlock);
			processBlock.setBounds(15, 25, 30, 30);
		}
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bOneStep;
    private javax.swing.JPanel pCPU;
    private javax.swing.JPanel pExecute;
    private javax.swing.JPanel pReady;
    private javax.swing.JScrollPane spStats;
    private javax.swing.JScrollPane spTable;
    private javax.swing.JTable tProcesses;
    // End of variables declaration//GEN-END:variables
}
